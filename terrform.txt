terraform installation
------------------------
sudo yum install -y yum-utils shadow-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform

aws instance creation:
-----------------------
example-1
---------
provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "one" {
ami = "ami-03eb6185d756497f8"
instance_type = "t2.micro"
}

Commands:
terraform init 
terraform plan   
terraform apply 
terraform destroy 

terraform state list
example-2
----------
provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "one" {
count = 5
ami = "ami-03eb6185d756497f8"
instance_type = "t2.micro"
}

target: used to delete a specific resource
Single target: terraform destroy -target=aws_instance.one[0]
Multi target: terraform destroy -target=aws_instance.one[1] -target=aws_instance.one[2]

variables:

provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "one" {
count = var.instance_count
ami = var.ami_id
instance_type = var.instance_type
}

variable "instance_type" {
description = "*"
type = string
default = "t2.large"
}

variable "instance_count" {
description = "*"
type = number
default = 5
}

variable "ami_id" {
description = "*"
type = string
default = "ami-0dbc3d7bc646e8516"
}

history:
 aws configure
    2  sudo yum install -y yum-utils shadow-utils
    3  sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    4  sudo yum -y install terraform
    5  terraform --version
    6  vim main.tf
    7  terraform fmt
    8  cat main.tf 
    9  terraform init
   10  terraform plan
   11  terraform dey --auto-approve
   12  terraform state list
   13  ls
   14  cat terraform.tfstate 
   15  terraform destroy
   16  mkdir terraform
   17  cd terraform/
   18  cd ..
   19  cat main.tf 
   20  cd terraform/
   21  ls
   22  vim main.tf
   23  terraform plan
   24   terraform init
   25  terraform plan
   26  cat main.tf 
   27  terraform fmt
   28  cat main.tf 
   29  terraform apply --auto-approve
   30  terraform destroy --auto-approve
   31  vim main.tf
   32  terraform plan
   33  terraform apply --auto-approve
   34  terraform destroy --auto-approve
   35  cat main.tf 
   36  mkdir dir
   37  cd dir/
   38  vim main.tf
   39  vim variables.tf
   40  terraform init
   41  terraform apply --auto-approve
   42  terraform destroy --auto-approve
-----------------------------------------------------------------------------------------------------------------------
vim vpc.pem

provider "aws"{
region="us-east-1"
}
resource "aws_vpc""one"{
cidr_block="20.0.0.0/16"
tags={
Name="myvpc"
}
}
resource "aws_subnet""two"{
vpc_id=aws_vpc.one.id
cidr_block="20.0.0.0/24"
tags={
Name="mysubnet"
}
}

tfvars:
-------
Using tfvars files allows you to keep sensitive or environment-specific information separate from your main Terraform configurations. It also makes it easier to manage and reuse configurations across different environments or teams.
vim variable.tf

variable "region" {
description = "The AWS region to deploy resources in."
type        = string
}

variable "instance_type" {
description = "The EC2 instance type."
type        = string
}

vim main.tf

provider "aws" {
region = var.region
}
resource "aws_instance" "example" {
ami           = "ami-0c94855ba95c71c99"
instance_type = var.instance_type
}

test.tfvars:
region = "us-east-1"
instance_type = "t2.micro"

to exicute the tf vars use the following command:

terrraform apply --auto-approve -var-file="test.tfvars"

TERRAFORM CLI:
we can pass inputs for terraform from cli.

provider "aws" {
region = "ap-south-1"
}

resource "aws_instance" "one" {
ami = "ami-0b41f7055516b991a"
instance_type = var.instance_type
tags = {
Name = "linux"
}
}

variable "instance_type" {
}

terraform apply --auto-approve -var="instance_type=t2.medium"
terraform destroy --auto-approve -var="instance_type=t2.medium"

TERRAFORM OUTPUTS: used to print the resource properties.
ex: public-ip, dns, instance type

provider "aws" {
region = "ap-south-1"
}

resource "aws_instance" "one" {
ami = "ami-0b41f7055516b991a"
instance_type = "t2.medium"
tags = {
Name = "server"
}
}

output "ram" {
value = [aws_instance.one.public_ip, aws_instance.one.private_ip, aws_instance.one.public_dns, aws_instance.one.private_dns]
}

44  terraform --version
   45  ls
   46  cd terraform/
   47  ls
   48  cd dir
   49  ls
   50  cd ..
   51  mkdir dir1
   52  cd dir1/
   53  vim vpc.tf
   54  terraform  init
   55  terraform plan
   56  terraform apply --auto-approve
   57  terraform destroyy --auto-approve
   58  terraform destroy --auto-approve
   59  cat vpc.tf 
   60  provider "aws" {
   61    region = "us-east-1" # Change this to your desired AWS region
   62  }
   63  resource "aws_vpc" "my_vpc" {
   64    cidr_block = "10.0.0.0/16" # Define your desired CIDR block for the VPC
   65    tags = {
   66      Name = "my_vpc"
   67    }
   68  }
   69  resource "aws_subnet" "my_subnet" {
   70    vpc_id     = aws_vpc.my_vpc.id
   71    cidr_block = "10.0.0.0/24" # Define your desired CIDR block for the subnet
   72    availability_zone = "us-east-1a" # Choose your desired availability zone
   73    tags = {
   74      Name = "my_subnet"
   75    }
   76  }cat vpc.tf 
   77  ls
   78  cat vpc.tf 
   79  vim main.tf
   80  vim variables.tf
   81  vim test.tfvars
   82  terraform init
   83  ls
   84  rm -rf vpc.tf 
   85  terraform init
   86  terraform plan
   87  terraform apply --auto-approve -var-file=test.tfvars
   88  terraform destroy --auto-approve -var-file=test.tfvars
   89  ls
   90  rm -rf *
   91  ls
   92  mkdir terraform
   93  cd terraform
   94  vim main.tf
   95  vim variables.tf
   96  vim test.tfvars
   97  vim main.tf
   98  cat main.tf 
   99  cat variables.tf 
  100  cat test.tfvars 
  101  terraform init
  102  vim main.tf 
  103  terraform init
  104  terraform plan
  105  terraform plan -var-file="test.tfvars"
  106  vim dev.tfvars
  107  terraform apply -var-file="dev.tfvars"
  108  terraform apply --auto-approve -var-file="test.tfvars"
  109  terraform destroy --auto-approve -var-file="test.tfvars"
  110  vim main.tf 
  111  vim variables.tf 
  112  vim dev.tfvars 
  113  terraform init
  114  vim variables.tf 
  115  cat -n variables.tf 
  116  terraform init
  117  terraform validate
  118  terraform plan -var-file="dev.tfvars"
  119  terraform apply -var-file="dev.tfvars"
  120  terraform apply --auto-approve -var-file="dev.tfvars"
  121  terraform destroy --auto-approve -var-file="dev.tfvars"
  122  ls
  123  cd ..
  124  mkdir terra
  125  cd terra
  126  vim main.tf
  127  cat main.tf 
  128  terraform init
  129  cat main.tf 
  130  ls
  131  terraform apply --auto-approve -var="instance_type"="t2.micro"
  132  vim main.tf
  133  terraform apply --auto-approve -var="instance_type"="t2.micro"
  134  terraform destroy --auto-approve -var="instance_type"="t2.micro"
  135  ls
  136  rm -rf terraform.tfstate terraform.tfstate.backup 
  137  vim main.tf 
  138  terraform init
  139  terraform apply --auto-approve 
  140  terraform destroy --auto-approve 
  141  vim vpc.tf
  142  ls
  143  terraform init
  144  rm -f main.tf 
  145  terraform init
  146  terraform plan
  147  vim vpc.tf 
  148  terraform plan
  149  vim vpc.tf 
  150  terraform plan
  151  terraform apply --auto-approve
  152  terraform state list
  153  terraform destroy --auto-approve
---------------------------------------------------------------------------------------------------
 
provider "aws" {
region = "us-east-1"
}

resource "aws_s3_bucket" "one" {
bucket = "rac ket321223"
}

resource "aws_ebs_volume" "two" {
size = 20
availability_zone = "us-east-1b"
tags = {
Name = "my-ebs"
}
}

resource "aws_iam_user" "three" {
name = "akash"
}

resource "aws_instance" "four" {
ami = "ami-0e8a34246278c21e4"
instance_type = "t2.micro"
tags = {
Name = "server-1"
}
} 

Terraform taint: used to recreate specific objects 
in real time some resource we need to recrete if it will not work properly 
then we can use taint concetp

terraform taint aws_instance.four
terraform apply --auto-approve 

TERRAFORM LOCALS:
its a block used to define the values.
we can define the vaule once and used it for multiple times.
provider "aws" {
region = " us-east-1"
}

locals {
env = "test"
}

resource "aws_vpc" "one" {
cidr_block = "10.0.0.0/16"
tags = {
Name = "${local.env}-vpc"
}
}

resource "aws_subnet" "two" {
cidr_block = "10.0.0.0/16"
availability_zone = "ap-south-1a"
vpc_id = aws_vpc.one.id
tags = {
Name = "${local.env}-subnet"
}
}

resource "aws_instance" "three" {
subnet_id = aws_subnet.two.id
ami = "ami-0e8a34246278c21e4"
instance_type = "t2.micro"
tags = {
Name = "${local.env}-server"
}
} 

TERRAFORM WORKSPACE:
WORKSPACE: Where we write the code and execute operations.
it is used to isolate the env.
in real time all the works we do on workspaces only.
if we perform an operation on one workspace it wont affect another workspace.


NOTE:
1. we can't delete our current workspace.
2. we can't delete our workspace without deleting resources.
3. we cant't delete default workspace.

COMMANDS:

terraform workspace list	: to list workspaces
terraform workspace new dev	: to create a new workspace	
terraform workspace show	: to show current workspace
terraform workspace select prod	: to switch the workspaces
terraform workspace delete prod	: to delete the workspaces


provider "aws" {
region = "us-east-1"
}

locals {
env = "${terraform.workspace}"
}

resource "aws_vpc" "one" {
cidr_block = "10.0.0.0/16"
tags = {
Name = "${local.env}-vpc"
}
}

resource "aws_subnet" "two" {
cidr_block = "10.0.0.0/16"
availability_zone = "ap-south-1a"
vpc_id = aws_vpc.one.id
tags = {
Name = "${local.env}-subnet"
}
}

resource "aws_instance" "three" {
subnet_id = aws_subnet.two.id
ami = "ami-0e8a34246278c21e4"
instance_type = "t2.micro"
tags = {
Name = "${local.env}-server"
}
}
vim main.tf
  164  terraform init
  165  terraform plan
  166  cat main.tf 
  167  vim main.tf 
  168  terraform init
  169  terraform plan
  170  cat main.tf 
  171  terraform workspace list
  172  terraform workspace new dev
  173  terraform workspce select dev
  174  terraform workspace select dev
  175  terraform workspace show
  176  ls
  177  vim main.tf 
  178  mkdir terraform-scripts
  179  cd terraform-scripts/
  180  ls
  181  vim main.tf
  182  terraform fmt
  183  cat main.tf 
  184  terraform init
  185  cat main.tf 
  186  terraform plan
  187  terraform apply --auto-approve
  188  terraform  state list
  189  terraform taint aws_instance.four
  190  terraform apply --auto-approve
  191  terraform destroy --auto-approve
  192  ls
  193  cat main.tf 
  194  vim main.tf 
  195  terraform init
  196  terraform plan
  197  terraform apply --auto-approve
  198  vim main.tf 
  199  ls
  200  cd terraform-scripts/
  201  ls
  202  vim main.tf 
  203  terraform apply --auto-approve
  204  terraform state list
  205  terraform destroy --auto-approve
  206  terrform workspace list
  207  terraform workspace list
  208  terraform workspace new dev
  209  terraform workspace list
  210  ls
  211  vim main.tf 
  212  terraform init
  213  terraform plan
  214  vim main.tf 
  215  terraform plan
  216  terraform apply --auto-approve
  217  terraform destroy --auto-approve
  218  terraform workspace delete dev
---------------------------------------------------------------------------------------------------------------------
