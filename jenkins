day-1:

 sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
    2   sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
    3  yum install fontconfig java-11-openjdk -y
    4   sudo amazon-linux-extras install java-openjdk11 -y
    5  java -version
    6  jenkins --version
    7  yum install jenkins -y
    8  jenkins --version
    9  service jenkins status
   10  service jenkins start
   11  service jenkins status
   12  cat /var/lib/jenkins/secrets/initialAdminPassword

day-2:
maven integration with maven
installation setup for jenkins and maven
vim jenkins.sh

#STEP1: DOWNLOAD JENKINS REPOSITORY AND ENTER THE KEY:
 sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
 sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
#STEP2:INSTALL JAVA OPENJDK11
 sudo amazon-linux-extras install java-openjdk11 -y
#STEP3:INSTALL JENKINS AND START THE JENKINS SERVICE
  yum install jenkins -y
  service jenkins start
#STEP4: INSTALL JAVA-1.8.0-OPENJDK,GIT,MAVEN
  yum install java-1.8.0-openjdk maven git -y
#STEP5:SWITCH THE JAVA VERSION 
 update-alternatives --config java

  sh jenkins.sh
goto browser with 
publicip:8080

then get back to terminal enter the following 
cat /var/lib/jenkins/secrets/IntialAdminPassword
JOB-SETUP:
goto jenkins dashboard----->click on new item---->give the name of job--->select freestylejob--->lick on ok
goto scm---->give the github repository---goto buildsteps---->select toplevel invoke maven targets--->clean package-->save job
--->click on build now

parameterised builds:
5 types of parameters
boolean parameters
file parameter
choice parmeter
string parmeter
multistring parmeter

goto general section--->select this project is perameterised-->click on parameters

build triggers:
it can automate our project or job
1. build periodically
2.pollscm
3.webhooks

build periodically:
 it works like alaram.if you select some particular time intervel job is build automatically
poll scm:
 whenever the developer change the commit in that time only job will build depend on our time setup
webhooks:
  whenever the developer change the commit in that time only immidietly job will build
goto setting inside the repository --->selectwebhooks--->add webhook---->punderpayload url (jenkinsurl/github-webhook/)--->create webhook
day-3:
build periodically

crontab
  * * * * *
1 * indicates minute
2 *-->indicates hour
3 *--->indicates date
4 *-->month
5 *-->week of the day

26-09 10.30 


buld after other projects built
--->it is als0 called as linked jobs,in this we have to wait for first job then only second job will trigger automatically 
job1--->aftercompletion of job2 it will trigger the job1(here job1 is downstream)
mannually trigger job2--->automaticall job1 will trigger--->automatically job3 will trigger
Trigger builds remotely (e.g., from scripts)
we can build the job from so far from our machine or server


http://23.22.162.236:8080/job/job2/build?token=ramesh

buildsteps---->select exicute shell



jenkins variables:
1.local variables--->these are working inside the job only
name=ram
loc=andhra
jobloc=hyderbad
echo "hi my name is $name ,i am from $loc,working at $jobloc"

2.global variables
goto dash board--->manage jenkins--->system-->global properties--->environmental variables


3.jenkins varibls

password less login:

1.cd /var/lib/jenkins--->vim conf.xml----goto 9 line change true to false( <useSecurity>false</useSecurity>)--->svae is
2.service jenkins restart

change the portnumber:
1.vim /usr/lib/jenkins/systemd/system/jenkins.service
goto 67 th line
2.change the portnumber --> save it 
3.goto inbound rules enabkle the port number
4.service jenkins restart

day-4

installation of jenkins on ubuntu

curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
    /usr/share/keyrings/jenkins-keyring.asc > /dev/null
 echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
    https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
    /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
 sudo apt-get install fontconfig openjdk-11-jre
 sudo apt-get install jenkins



master slave
master slave configuration:java-openjdk11 is mandatory for master slave configuration

steps:

Manage Jenkins--->nodes--->select perminant agent--->Number of executors-->3
---->Remote root directory-->/tmp
Labels--->slave
usage--->only label expression matched
Launch method--->launch via ssh agent
Host-->private ip of slave
credentials:click on add --->select jenkins---select username with privetekey
  ---->id (slave)--->description(slave)--->select secretkey then add private key 
  --->click add---->
  
  Host Key Verification Strategy--->nonverifying stratogy
history of master
sudo apt-get update -y
    2  apt-get install jenkins -y
    3  service  jenkins status
    4  apt install maven -y
    5  mvn --version
    6  mvn archetype:generate
    7  ls
    8  cd java/
    9  ls
   10  mvn package
   11  ls
   12  cd target/
history slave
 apt update -y
    6  apt-get install fontconfig openjdk-11-jre -y
day-5:
jenkins users:
step-1
RBAC : Role based access control
it is used to restrict the user for jenkins job.
it provide only few permissions for only few jobs.
we can crete jenkins users

goto manage jenkins--->select users--->add user--->ram-->add another user--->
step-2
plugin download:
manage jenkkins
plugins
available section
rolebased autherization stratagy

step-3
manage jenkins--->security---->authrization---->role based stratagy--->save

step-4:
MANAGE AND ASSIGN USERS:
manage roles-->add-->fresher and experience--->fresher-->overall read--->exp--->admin
assign roles-->add user--->ram :fresher--->ganesh:exprience

jenkins custamised work space:
------------------------------
to create our own workspce to store the job information

mkdir /root/jenkinsworkspace

chown jemkins:jemkins jenkinsworkspace

chown jemkins:jemkins /root

job configure--->general section --->select advanced section--->custom workspace--->/root/jenkinsworkspace

then we an run the job and observe the workspace

deployment process using master and slave:
------------------------------------------
step-1:
------
setup master and slave 

install the tomcat and maven and openjdk11 on slave
sudo apt update
sudo apt install openjdk-8-jdk
java -version
sudo update-alternatives --config java

download the deploy to container plgin

install the tomcat on slve server

tomcat setup:
--------------
wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.83/bin/apache-tomcat-9.0.83.tar.gz
tar -xzf apache-tomcat-9.0.83.tar.gz
cd apache-tomcat-9.0.83
vi apache-tomcat-9.0.83/conf/tomcatusers.xml

 <role rolename="manager-gui"/>
  <role rolename="manager-script"/>
  <user username="tomcat" password="tomcat" roles="manager-gui,manager-script"/>

add the user and password

vi apache-tomcat-9.0.83/webapps/manager/META-INF/context.xml

delete 21 and 22 lines


step2:
create freestyle job--->Restrict where this project can be run
in general section---->select github repository--->build steps--->clean package
--->postbuild actions-->selct war/jar files-->save

jenkins backup:
command for backup
 tar -zcvf /mnt/ext_mount/jenkins.tar.gz /var/lib/jenkins

day-6
pipeline:
it is a step by step exicution of process or sequential exicution of process

types of pipeline

1.declarative
2.scripted pipeline

jenkins pipelines are written in groovy language

delarative pipeline is start with pipeline
scripted  pipeline is start with node

example for declarative pipeline

single stage pipeline:

pipeline{
agent any
stages{
stage('createfile'){
steps{
sh 'touch file'
}
}
}
}
PASSS:
P:pipeline
A:agentany
s:stages
s:stage
s:steps

pipeline {
    agent any

    stages {
        stage('git checkout') {
            steps {
               git branch: 'main', url: 'https://github.com/mohanlucky2/jenkins-java-project.git'
            }
        }
         stage('compile') {
            steps {
              sh 'mvn compile'
            }
        }
        stage('test') {
            steps {
              sh 'mvn test'
            }
        }
         stage('package') {
            steps {
              sh 'mvn package'
            }
        }
    }
}

history:
 service jenkins status
   35  cd /var/lib/jenkins/workspace/pipeline-1
   36  ls
   37  cd
   38  mvn --version
   39  apt install openjdk-8-jdk -y
   40  apt update -y
   41  apt install openjdk-8-jdk -y
   42  apt install maven -y
   43  sudo dpkg --configure -a
   44  apt install openjdk-8-jdk -y
   45  apt install maven -y
   46  mvn --version
   47  update-alternatives --config java
   48  mvn --version
   49  cd /var/lib/jenkins/workspace/mavenpipeline
   50  ls
   51  cd target/

jenkins variables and parametrs pipeline
-----------------------------------------

pipeline{
    agent any
    environment {
      name='ram'
      loc='hyd'
      job='devops engineer'
    }
    parameters {
        choice(name:'server',choices:['a','b','c'])
    }
    stages{
        stage("one"){
            steps{
                echo "hai all my name is $name,i am from $loc,working as $job"
                echo "the job name is $JOB_NAME,the build number is $BUILD_NUMBER"
            }
        }
    }
}

pipeline as a code:
pipeline {
    agent{
        label 'node'
    }

    stages {
        stage('one') {
            steps {
                git branch: 'main', url: 'https://github.com/mohanlucky2/jenkins-java-project.git'
                sh '''
                mvn compile
                mvn test
                mvn package
                '''
            }
        }
        stage('two'){
            steps{
                deploy adapters:[
                    tomcat9(
                        credentialsId:'d30b6312-e810-4b17-940f-6de13a8bb429',
                        path:'',
                        url:'http://3.91.74.126:8080/'
                        )
                        ],
                        contextPath: 'tomcat-deploy',
                        war: 'target/*.war'
            }
        }
    }
}

type-2
pipeline {
    agent{
        label 'node'
    }

    stages {
        stage('one') {
            steps {
                git branch: 'main', url: 'https://github.com/mohanlucky2/jenkins-java-project.git'
                sh 'mvn compile'
                sh 'mvn test'
                sh 'mvn package'
            }
        }

 
